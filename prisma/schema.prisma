// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "rhel-openssl-3.0.x"] // komentari jika menggunakan database local
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PREVIEW_VERSION3")
  // directUrl = env("DIRECT_URL") // komentari jika menggunakan database local
}

enum ROLE {
  ADMIN
  SUPERADMIN
}

enum PAYMENT_METHOD {
  DEBIT
  CASH
  TRANSFER
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      ROLE       @default(ADMIN)
  profile   Profile?
  payments  Payments[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("users")
}

model Profile {
  id      String @id @default(uuid())
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  address String
  phone   String @unique
  ktp_id  String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Member {
  id         String      @id @default(uuid())
  name       String
  email      String?     @unique
  phone      String?     @unique
  address    String
  membership Membership?
  payments   Payments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("members")
}

model Membership {
  id           String    @id @default(uuid())
  member_id    String    @unique
  member       Member    @relation(fields: [member_id], references: [id], onDelete: Cascade)
  status       Boolean   @default(false)
  active_until DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("memberships")
}

model Packages {
  id       String     @id @default(uuid())
  name     String
  price    Int
  days_add Int
  payments Payments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("packages")
}

model Payments {
  id             String         @id @default(uuid())
  staff_id       String?
  staff          User?          @relation(fields: [staff_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  member_id      String?
  member         Member?        @relation(fields: [member_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  package_id     String?
  package        Packages?      @relation(fields: [package_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  payment_method PAYMENT_METHOD
  total_payments Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}
